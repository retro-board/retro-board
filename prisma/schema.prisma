generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  retroBoards   RetroBoard[] // New relation
  cards         Card[] // New relation
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for retro board functionality
model RetroBoard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  maxVotes  Int      @map("max_number_of_votes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  columns   Column[]
}

model Column {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  retroBoardId String     @db.ObjectId
  retroBoard   RetroBoard @relation(fields: [retroBoardId], references: [id], onDelete: Cascade)
  cards        Card[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Card {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  votes     Int      @default(0)
  hidden    Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  columnId  String   @db.ObjectId
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
